package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
Написать функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.
Требования:
1. Входные данные для функции: ссылка на массив, каждый
элемент которого - слово на русском языке в кодировке
utf8
2. Выходные данные: ссылка на мапу множеств анаграмм
3. Ключ - первое встретившееся в словаре слово из
множества. Значение - ссылка на массив, каждый элемент
которого, слово из множества.
4. Массив должен быть отсортирован по возрастанию.
5. Множества из одного элемента не должны попасть в
результат.
6. Все слова должны быть приведены к нижнему регистру.
7. В результате каждое слово должно встречаться только один
раз.
*/

//toLower приводит все строки слайса строк к нижнем регистру.
//Принимает - слайс строк, строки в котором требуется привести к нижнему регистру.
//Возвращает - слайс строк, строки в котором приведены к нижнему регистру.
func toLower(in []string) []string {
	result := make([]string, len(in))

	for i := 0; i < len(in); i++ {
		result[i] = strings.ToLower(in[i])
	}

	return result
}

//deleteRepeated удаляет повторные вхождения строк в слайс.
//Принимает слайс строк, в котором требуется удалить повторы.
//Возвращает слайс строк с удаленными повторами.
func deleteRepeated(in []string) []string {
	result := make([]string, 0)
	m := make(map[string]bool, 0)

	for _, v := range in {
		if !m[v] {
			m[v] = true
			result = append(result, v)
		}
	}
	return result
}

//makeAnagrammDict создает словарь (мапу) анаграмм из исходного множества (слайса) строк.
//Принимает - слайс строк.
//Возвращает - мапу с ключем строкой и значение слайсом строк:
//ключ - первое слово, принадлежащее данному множеству анаграмм, встреченное
//в исходном слайсе,
//значение - отсортированный по возрастанию слайс неповторяющихся строк,
//принадлжащих одному множеству анаграмм.
//Все строки в итоговом словаре приведены к нижнему регистру
func makeAnagrammDict(in []string) map[string][]string {
	lower := toLower(in)                  //приведем все строки к нижнему регистру
	woRepeated := deleteRepeated(lower)   //удаляем повторяющиеся строки
	tempM := make(map[string][]string, 0) //промежуточная мапа, ключ - отсортированное слов

	for _, v := range woRepeated {
		sorted := []rune(v)
		sort.Slice(sorted, func(i, j int) bool {
			return sorted[i] < sorted[j]
		})
		sortedS := string(sorted) //отсортированное слово

		tempM[sortedS] = append(tempM[sortedS], v)
	}

	//результирующая мапа
	resultM := make(map[string][]string, 0)

	for _, v := range tempM {
		if len(v) > 1 { //если всего один элемент - в словрь не попадает
			resultM[v[0]] = v //нулевой элемент, это первый добавленный (первый просмотренный)
			sort.Strings(v)
		}
	}

	return resultM
}

func main() {
	input := []string{"тест", "листок", "пятка", "пятак", "тяпка", "листок", "пятка", "слиток", "столик"}

	fmt.Println(input)
	fmt.Println(makeAnagrammDict(input))
}
